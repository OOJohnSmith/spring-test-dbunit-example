Quick Start Example
===================

Spring DBUnit provides integration between the Spring test framework and the DBUnit project.  In this example we show how to test a Hibernate JPA project using  a Hypersonic in-memory database.

Dependencies
============

This project will be built using Apache Maven.  Here is the complete POM file with all of the dependencies that we will need:

<<pom>>

Entity
======

For this simple project we will create a single “Person” Entity with attributes for their title, first name and last name.  We will also declare a query that we will make use of later.

<<entity>>

We also need to setup a persistence.xml file for hibernate to use:

<<persistence.xml>>

Service
=======

We need to have something to test so we’ll create a simple service that lets us search our Person entity using the named query from above:

<<service>>

Testing
=======

To make sure that our service is working we need to create a JUnit test.  Here is the basic structure of the test class:

<<test class (simple) >>

As the test is using the SpringJUnit4ClassRunner we also need a context xml configuration file.  Here we tell spring to scan for beans and we also setup Hibernate and the in-memory database.

<<xml>>

We can now create a test method to check that the service can find entities:

<<method>>

At this point the test should fail because the returned personList contains 0 items.  To make sure that the test passes we need to insert some database data.  This is where DBUnit comes in.  You may have noticed that the TestExecutionListeners annotation includes a reference to DbUnitTestExecutionListener.  This means that we can use the @DatabaseSetup annotation on the test method to configure the database from a flat XML file.  The xml file follows the standard DBUnit conventions:

<<xml>>

<<updated method>>

DBUnit should now execute before the test method runs to insert appropriate data into the database.  As a result the test should pass.

Testing expected data
=====================

As well as configuring the database before a test runs it is also possible to verify database set after the test completes.  Let’s update our service with a method to remove entities:

<<remove method>>

The method to test if remove works can use the @ExpectedDatabase annotation.  This will use DBUnit to ensure that the database contains expected data after the test method has finshed.

<<test method>>

Summary
=======

This quick introduction has shown how Spring DBUnit can be used to setup a database and verify expected content using simple annotations.

